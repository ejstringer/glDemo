[
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "dartR Introductory Tutorials",
    "section": "Welcome!",
    "text": "Welcome!\nüìò Introduction\nIn the age of genomics, the ability to efficiently analyze large-scale genetic data has become essential for researchers across evolutionary biology, conservation genetics, agriculture, and beyond. Among the many tools available, the dartR package in R stands out as a powerful, flexible, and user-friendly solution for working with SNP data derived from reduced-representation sequencing methods such as DArTseq and RADseq. This ebook is designed to guide you through the practical use of dartR - from installation and data import to advanced population genetic analyses and visualization. Whether you‚Äôre a seasoned bioinformatician or a newcomer to genetic data analysis, dartR offers a streamlined workflow that integrates data filtering, exploratory statistics, and reproducible reporting - all within the familiar environment of R. You‚Äôll learn how to:\n\nüß¨ Import and manage SNP datasets using dartR‚Äôs intuitive data structures\nüîç Apply rigorous filtering and quality control to ensure robust results\nüìä Perform key genetic analyses such as diversity metrics, population structure, and Fst\nüåç Visualize genetic patterns across space and time\nüõ†Ô∏è Extend dartR with custom functions and integrate it with other R packages\n\nBy the end of this guide, you‚Äôll not only understand how to use dartR effectively‚Äîyou‚Äôll be equipped to explore your own genetic datasets with confidence and clarity. Let‚Äôs dive into the genome, one SNP at a time."
  },
  {
    "objectID": "index.html#a-big-thank-you-to-the-developers",
    "href": "index.html#a-big-thank-you-to-the-developers",
    "title": "dartR Introductory Tutorials",
    "section": "A big thank you to the developers!",
    "text": "A big thank you to the developers!\nDartR published first by Gruber et al. (2018), and DartR V2 published by Mijangos et al. (2022)\n\n\n\n\nGruber, Bernd, Peter J. Unmack, Oliver F. Berry, and Arthur Georges. 2018. ‚ÄúDARTR : An R Package to Facilitate Analysis of SNP Data Generated from Reduced Representation Genome Sequencing.‚Äù Molecular Ecology Resources 18 (3): 691‚Äì99. https://doi.org/10.1111/1755-0998.12745.\n\n\nMijangos, Jose Luis, Bernd Gruber, Oliver Berry, Carlo Pacioni, and Arthur Georges. 2022. ‚ÄúdartR V2: An Accessible Genetic Analysis Platform for Conservation, Ecology and Agriculture.‚Äù Methods in Ecology and Evolution 13 (10): 2150‚Äì58. https://doi.org/10.1111/2041-210X.13918."
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#introduction",
    "href": "inst/tutorials/dartR03/dartR_data.html#introduction",
    "title": "1¬† dartR data structure and data input",
    "section": "Introduction",
    "text": "Introduction\n\nAbout\nIn this tutorial, you will learn how to work with dartR objects. If you haven‚Äôt already, check out the Introduction dartR ebook chapter How dartR stores your data and data input. There is also an accompanying AI podcast summary, which you should definitely check out if you are more of an auditory learner.\nIf you can‚Äôt see the left sidebar you just need to make the tutorial panel wider.\n\n\n\nThroughout this tutorial there will be interactive R scripts/consoles (like the one below). This is like a mini version of R running within this tutorial. But since we are already in R, you can also follow along in your own console and start writing your own code in the source panel. You could even try testing some of what you learn on your own data.\nBut first, try running the code below (press the button that says run code)\n\n\n# Press the Run Code button to run this code\n1+1\n\n\n\n\n\n# This is an example of the interactive component \n#of this tutorial. \n\n# Try running some code and testing out the three buttons:\n#  - Run Code, \n#  - Start Over, \n#  - and Solution\n\n\n\n\n\nAny troubles or tribulations, we have a great community that can be found on the dartR google group.\n\n\n\nSome of the exercises within this tutorial are specific to your working environment or Rstudio, these types of exercises will be surrounded by a green box, like the one below.\n\nIt might be loading in data, or setting the working environment, or creating an R project.\n\nThey need to be run in your console. These are optional at the time, if you want you can continue with the worked example and come back to these when you want to start working in your own RStudio.\n\n\n\nOne final note, while going through the tutorial your progress will be saved, if at any point you would like to refresh the tutorial and start over, the Start Over button is located at the bottom of the left sidebar, below the tutorial content.\n\n\n\nAlright! Let‚Äôs get started, click the button below to continue to the next section"
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#the-data",
    "href": "inst/tutorials/dartR03/dartR_data.html#the-data",
    "title": "1¬† dartR data structure and data input",
    "section": "The data",
    "text": "The data\nIn this worked example, we will access the sample data files provided on the dartR web page. You will be directed to download them later on in this tutorial.\n\nAssign a working directory, download raw data\nA first step is to assign a working directory\n\nCreate a project using the RStudio menu (File - New Project). Your project will become the default directory for files but you can change the the directory by using The RStudio menu (Session - Set Working Directory). Alternatively use setwd()\n\n\n\n\nOnce you have set your working directory it is a good idea to open an R script file (File - New File - R Script or use shortcut keys ctrl/cmd + shift + N) to write your code, instead of straight to the console.\n\nThen you need to load in dartRverse using the library() function\n\nBelow is example code, in the upper left hand corner of the code there is an icon to copy the code chunk (this applies for all code chunks in this tutorial).\n\nlibrary(dartRverse)\n\n\n\n\nBy loading in the dartRverse package it should automatically load in dartR.base and dartR.data. These are packages we need for this tutorial.\n\nSet the global verbosity level to 3 to provided detailed diagnostics, gl.set.verbosity(3)\n\n\n\nDownload raw data\n\nDownload the file sample_data_2Row.csv (click to download) and place it in the working directory. If you like you can open the file in Excel\n\nThis is a set of SNP data for Emydura, a freshwater turtle, in 2-row format as would be supplied by Diversity Arrays Technology Pty Ltd.\n\n\n\nThe contents and format of the csv file do not need to concern you. dartR handles all the complexities. If you do want to learn more, refer to the MetaDataDefinition file provided by Diversity Arrays Technology as part of their report. In this case, a definition file is provided as sample_metadata.xlsx. You can also go to the Diversity Arrays Technology (DArT) website.\n\n\nDownload the individual metadata file\nRecall that the individual metadata comprise attributes assigned to each individual.\n\nDownload the individual metadata file sample_metadata.csv (click to download) and place it in the working directory.\nOpen the file in Excel and examine its contents\n\n\n\n\nThe individual metadata file sample_metadata.csv has two compulsory fields: id and pop. Optional fields include lat, long, sex and maturity associated with each individual. You can add whatever attributes you like to this metadata file.\n\n\nRead the data into dartR\n\nRead the data from sample_data_2Row.csv into a dartR object and assign the individual metrics using gl.read.dart()\nName your dartR object gl\n\n\ngl &lt;- gl.read.dart(filename=\"./sample_data_2Row.csv\",\n                   ind.metafile=\"./sample_metadata.csv\")\n\n\n\nConsole output when reading in data\n\n\nStarting gl.read.dart \nStarting utils.read.dart \n  Topskip not provided.\n Setting topskip to 3 .\n  Reading in the SNP data\n  Detected 2 row format.\nNumber of rows per clone (should be only  2 s): 2 \n Added the following locus metrics:\nAlleleID CloneID AlleleSequence SNP SnpPosition CallRate OneRatioRef OneRatioSnp FreqHomRef FreqHomSnp FreqHets PICRef PICSnp AvgPIC AvgCountRef AvgCountSnp RepAvg .\nRecognised: 250 individuals and 255  SNPs in a 2 row format using ./www/sampledata2Row.csv \nCompleted: utils.read.dart \nStarting utils.dart2genlight \nStarting conversion....\nFormat is 2 rows.\nPlease note conversion of bigger data sets will take some time!\nOnce finished, we recommend to save the object using save(object, file=\"object.rdata\")\nAdding individual metrics: ./www/samplemetadata1.csv .\n  Ids for individual metadata (at least a subset of) are matching!\n  Found  250 matching ids out of 250 ids provided in the ind.metadata file.\n  Added population assignments.\n  Added latlon data.\n Added  id  to the other$ind.metrics slot.\n  Added  pop  to the other$ind.metrics slot.\n  Added  lat  to the other$ind.metrics slot.\n  Added  lon  to the other$ind.metrics slot.\n  Added  sex  to the other$ind.metrics slot.\n  Added  maturity  to the other$ind.metrics slot.\nCompleted: utils.dart2genlight \n   250 rows and 255 columns of data read\n  Read depth calculated and added to the locus metrics\n  Minor Allele Frequency (MAF) calculated and added to the locus metrics\n  Recalculating locus metrics provided by DArT (optionally specified)\n\nSummary of the SNP dataset\n  No. of loci: 255 \n  No. of individuals: 250 \n  No. of populations: 30 \n  Monomoporhic loci not deleted, assumed absent initially\n\nStarting gl.compliance.check \n  Processing genlight object with SNP data\n  Checking coding of SNPs\n    SNP data scored NA, 0, 1 or 2 confirmed\n  Checking for population assignments\n    Population assignments confirmed\n  Checking locus metrics and flags\n  Recalculating locus metrics\n  Checking for monomorphic loci\n    Dataset contains monomorphic loci\n  Checking for loci with all missing data\n    No loci with all missing data detected\n  Checking whether individual names are unique.\n  Checking for individual metrics\n    Individual metrics confirmed\n  Spelling of coordinates checked and changed if necessary to \n            lat/lon\nCompleted: gl.compliance.check \nCompleted: gl.read.dart \n\n\n\n\n\nGreat! Now we have our data, lets start interrogating it."
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#interrogate",
    "href": "inst/tutorials/dartR03/dartR_data.html#interrogate",
    "title": "1¬† dartR data structure and data input",
    "section": "Interrogate",
    "text": "Interrogate\n\nInterrogate the dartR genlight object\nLet‚Äôs examine the contents of the dartR object.\n\n\n\nJust before we do, lets do a quick refresher of what a dartR object actually is, of course if you want more background check out the ebook chapter associated with this tutorial.\n\n\n\nIf you are familiar with genlight objects, a dartR object is effectively a version of a genlight object that is specific to the dartR package suite. A genlight object is a data structure used to efficiently store and analyse large genetic marker data. It includes the allelic state for each SNP called and for every individual genotyped.\n\n\n\nAdditionally it also includes the metadata associated with the individuals genotyped and the SNP loci called. That‚Äôs a lot of information! So lets learn how to interrogate our dartR object.\n\n\nBasic diagnostics\nLet‚Äôs start by undertaking some basic diagnostics. Remember we named the data gl, so first let‚Äôs find out how many loci are in our dataset, using nLoc().\n\n\n\n\n\n\n\nnLoc(gl)\n\n\n If you are struggling with the code try pressing the Solution button to see the solution.\n\n\nMore diagnostics\nNext we can use the functions nInd() and nPop() to find out how many individuals and populations are in gl\n\n\n\n\n\n\n\nnInd(gl)\nnPop(gl)\n\n\n To run new code simply press the Start Over to clear the console and output.\n\n\nPopulation names\nThat‚Äôs great to find out how many individuals and populations we have but what about which populations we have. We can check this using the popNames()\n\n\n\n\n\n\n\npopNames(gl)\n\n\n\n\nIndividual names\nWe can check the individual names in a similar way, using indNames()\n\n\n\n\n\n\n\nindNames(gl)\n\n\n\n\nGenotypes\nSometimes we are actually interested in the SNP calls and we can access this formation within our dartR object using as.matrix(). Let‚Äôs display the genotypes for the first 3 individuals and the first 6 loci. After running the below code, try showing the first 5 individuals and first 10 loci.\n\n\n# Run Code\nas.matrix(gl)[1:3,1:6]\n\n\n\n\n\n#first 5 individuals and first 10 loci\nas.matrix(gl)[1:5,1:10]\n\n\n\n\n\nNice! Now lets move on to the metadata"
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#metadata",
    "href": "inst/tutorials/dartR03/dartR_data.html#metadata",
    "title": "1¬† dartR data structure and data input",
    "section": "Metadata",
    "text": "Metadata\n\nThe two types\nThere are two types of metadata, one associated with the loci and the other associated with individuals. Let‚Äôs start with individual metadata.\n\n\nIndividual metrics\nIndividual metadata are user-provided and not generated by DArT, and they are stored in a separate dataframe within the dartR object, known as ind.metrics. This metadata is input via a csv file, and are loaded into the genlight Read the data into dartR using gl.read.dart(). The file must include at least two required columns: id, which uniquely identifies each individual or specimen, pop, which designates the biological population each individual belongs to. Additional user-defined metadata (e.g., sex, maturity, latitude, and longitude) can also be included in the same file.\n\n\nWhat do we have in the way of individual metrics?\ndartR objects store individual metadata that can seem a little hard to access. But don‚Äôt worry it‚Äôs easier than it looks, all you need to know is the metadata‚Äôs address. The individual metadata lives at gl@other$ind.metrics.\nNow let‚Äôs see what metadata is stored in our turtle data using names():\n\n\n\n\n\n\n\nnames(gl@other$ind.metrics)\n\n\n\n\nNext, undertake some basic diagnostics:\nExamine the contents of the individual metrics, in this case the first 10 values of the attribute sex:\n\n\n## Only first 10 entries shown\ngl@other$ind.metrics$sex[1:10]   \n\n\n\n\n\n# example\ngl@other$ind.metrics$pop[1:10]\n\n\nIn the same R code box, try it also with some other metrics.\n\n\n\nGreat! If you are finished examining the individual metadata let‚Äôs move on to the locus metadata.\n\n\nLocus metrics\nThe locus metadata included in the dartR object are those provided as part of your Diversity Arrays Technology report. These metadata are obtained from the Diversity Arrays Technology csv file when it is read in to the genlight object using gl.read.dart(). The locus metadata are held in an R data.frame that is associated with the SNP data as part of the dartR object.\n\n\nWhat do we have in the way of locus metrics?\nLocus metadata lives at gl@other$loc.metrics. Let‚Äôs see what metadata is stored in our turtle data (just like we did with our individual metadata).\n\n\n## list the names() of loc.metrics\n\n\n\n\n\nnames(gl@other$loc.metrics)\n\n\n\n\nNext, undertake some basic diagnostics:\nExamine the contents of the locus metrics, in this case the first 10 values [1:10] of the attribute ‚ÄúRepAvg‚Äù.\n\n\n\n\n\n\n\n## first 10 entries\ngl@other$loc.metrics$RepAvg[1:10]\n\n\nIn the same R code box, try it also with some other metrics.\n\n\n\nGreat work! You really must be getting to know the data by now. Let‚Äôs move on to saving our work."
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#save-and-tidy",
    "href": "inst/tutorials/dartR03/dartR_data.html#save-and-tidy",
    "title": "1¬† dartR data structure and data input",
    "section": "Save and tidy",
    "text": "Save and tidy\n\nCompact files\nRaw data files can be very large and take time to read into dartR. It is something you only want to do once. You can save your dartR genlight object in compact binary form. This will take only seconds to load into RStudio, not minutes.\n\n\nSave the dartR genlight object in compact form\n\nTry saving gl or your own genlight object to your workspace using gl.save, and verify that it has been saved to the appropriate directory.\nThen restore it to a new dartR object using gl.load.\n\nBelow is the code to save gl as an R file and reload it. Within the \" \" you put the name you want to call your file followed by .Rdata \n\ngl.save(gl,\"turtle.Rdata\")\ngl.new &lt;- gl.load(\"turtle.Rdata\")\n\n\n\nTidy up the Workspace\nWe have created files that we will not use again, so they should be removed from the workspace.\n\nTidy up your workspace by removing the genlight objects gl and gl.new using rm(), assuming you do not want to access them again in raw form (you can always load it back in later).\n\nBelow is the code to remove objects from your environment\n\nrm(gl, gl.new)\n\n\n\nYou are now a pro!"
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#review",
    "href": "inst/tutorials/dartR03/dartR_data.html#review",
    "title": "1¬† dartR data structure and data input",
    "section": "Review",
    "text": "Review\n\n\nLet‚Äôs review what we learnt from the SNP data (only applicable for the RStudio interactive tutorial version)"
  },
  {
    "objectID": "inst/tutorials/dartR03/dartR_data.html#exercises",
    "href": "inst/tutorials/dartR03/dartR_data.html#exercises",
    "title": "1¬† dartR data structure and data input",
    "section": "Exercises",
    "text": "Exercises\nBelow are two exercises for you to try on your own with everything you‚Äôve learnt. We do provide hints for you to review your work but refrain from viewing them until you have completed the exercise to the best of your ability.\n\nExercise 1: 1-Row Format\n\nExercise\n\nOpen the file sample_data_1Row.csv (click to download) in Excel. This is a set of SNP data for Emydura, a freshwater turtle, in 1-row format as would be supplied by Diversity Arrays Technology Pty Ltd.\nRefer to the MetaDataDefinition file provided by Diversity Arrays Technology as part of their report. In this case, a definition file is provided as MetaDataDefinition.xlsx (click to download).\nDuring the worked example you should have already downloaded the individual metadata, if you have not already do so now sample_metadata.csv (click to download). Examine the individual metadata in the file and note the two mandatory columns id and pop.\nCreate a new script in the RStudio Editor Window and add the lines\n\n\n# EXERCISE 1: 1-Row Format\n# Input data from sample_data_1Row.csv, \n#   associate with sample_metadata.csv\n\n\nAdd a statement to read the SNP data in to dartR as a genlight object called gl.1row\nAdd a statement to examine a summary of the contents of gl.1row\nUse the as.matrix() function to display the genotypes for the first 5 individuals and the first 10 loci.\n\n\n\nHints (click to expand)\n\nTo load in DArT data you need to use the function gl.read.dart(). Don‚Äôt forget to use the assign function &lt;- to name your data.\nThere are many useful functions to summarise your data, like nLoc, popNames(), etc‚Ä¶, but you can also just type the name of your dartR object to be shown useful summary information.\nTo subset data you use the square brackets [ ]. A matrix is two dimensional so you can subset by rows and columns, separated by a comma like so: [rows, columns]. Individuals are associated with rows and loci are associated with columns\n\n\n\nSolutions (click to expand)\n\n\n# EXERCISE 1: 1-Row Format\n# Input data from sample_data_1Row.csv, \n#   associate with sample_metadata.csv\n\n# laod\ngl.1row &lt;- gl.read.dart(filename=\"./sample_data_2Row.csv\",\n                   ind.metafile=\"./sample_metadata.csv\")\n\n# Summary\ngl.1row\nnLoc(gl.1row)\nnInd(gl.1row)\nnPop(gl.1row)\n\n# genotypes\n\nas.matrix(gl.1row)[1:5,1:10]\n\n\n\n\n\nExercise 2: SilicoDArT\n\nExercise\n\nOpen the file sample_data_silicodart.csv in Excel. This is a set of marker presence/absence data for Cherax destructor provided in SilicoDArT format by Diversity Arrays Technology Pty Ltd.\nRefer to the documentation on the Diversity Arrays Technology web page to understand the scoring of the data in the SilicoDArT format.\nAlso refer to the MetaDataDefinition file provided by Diversity Arrays Technology as part of their report. The same file as Exercise 1.\nIndividual metadata file is the same for exercise 1.\nCreate a new script in the RStudio Editor Window and add the lines\n\n\n# EXERCISE 2: SilicoDArT data\n# Input data from sample_data_SilicoDArT.csv, \n#  associate with sample_metadata.csv\n\n\nAdd a statement to read the SNP data in to dartR as a genlight object called gs. You will need to use the gl.read.silicodart() function.\nAdd a statement to examine a summary of the contents of gs.\nUse the as.matrix() function to display the genotypes for the first 5 individuals and the first 10 loci.\n\n\n\nHints (click to expand)\n\nstill to come‚Ä¶.\n\n\n\nSolutions (click to expand)\n\nstill to come‚Ä¶."
  }
]